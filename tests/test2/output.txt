+ ./cmicro2 -l runs/test2/a.lst -o /dev/null test_parser.mic
ERROR: line 6, region syntax in .REGION ,BAD1: '/' expected after .REGION
ERROR: line 7, region syntax in  .REGION /XBAD2: number expected after '/'
ERROR: line 8, region syntax in  .REGION /BADX3: ',' expected after low address
ERROR: line 9, region syntax in  .REGION /200,XBAD4: number expected after ','
ERROR: line 10, region syntax in  .REGION /200,BADX5: bad char X after high address
ERROR: line 18, constraint syntax in =2: bad char 2 after '='
ERROR: line 19, constraint syntax in =01*2: bad char 2 after constraint
ERROR: line 29, field def syntax in /=  FB0: empty name
ERROR: line 30, field def syntax in FB1 /=  X: '<' expected after '/='
ERROR: line 31, field def syntax in FB2 /=  <X: number expected after '<'
ERROR: line 32, field def syntax in FB3 /=  <0X: '>' expected after number
ERROR: line 33, field def syntax in FB4 /=  <0:X: number expected after ':'
ERROR: line 34, field def syntax in FB5 /=  <0>X: bad char X after '>'
ERROR: line 35, field syntax in FB6 /=  <0>,]: qualifier expected after ','
ERROR: line 36, field def syntax in FB7 /=  <0>,.POOP: bad qualifier .POOP
ERROR: line 37, field syntax in FB8 /=  <0>,.DEFAULT]: expected '=' after .DEFAULT
ERROR: line 38, field def syntax in FB8 /=  <0>,.DEFAULT=X: number expected after '='
ERROR: line 39, field def syntax in FB8 /=  <0>,.DEFAULT=F]: bad char ] after .DEFAULT=
ERROR: line 40, field def syntax in FB8 /=  <0>,.ADDRESS]: bad char ] after .ADDRESS=
ERROR: line 41, field def syntax in FB8 /=  <0>,.NEXTADDRESS]: bad char ] after .NEXTADDRESS=
ERROR: line 42, illegal field indexes <0:1> in FB9
ERROR: line 43, field FG1 already defined
ERROR: line 51, field val syntax in FDB1 = X: expected number
ERROR: line 52, field val syntax in FDB2 = 0X: bad char X after number
ERROR: line 53, field value FDG1 = 0x0 already defined in field A
ERROR: line 58, macro def syntax: expected trailing '"'
ERROR: line 59, macro MG1 already defined
ERROR: line 61, field value FDB3 = 0x0 cannot be defined outside active field
ERROR: line 64, ucode syntax: line truncated after '/'
ERROR: line 65, duplicate label: LG1
ERROR: line 68, multiple address specifiers
ERROR: line 69, addr syntax: bad char : after number
ERROR: line 70, label syntax: empty label before ':'
ERROR: line 74, ucode syntax: number format bad: 0X
ERROR: line 75, ucode syntax: expected ',' after 0
ERROR: line 76, ucode syntax: expected '/' after X
ERROR: line 77, token name truncated: 1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567
ERROR: line 78, ucode syntax: expected '/' after X
ERROR: line 81, macro expansion bad arg: @:
ERROR: line 84, macro expansion bad arg: @/
ERROR: line 87, macro expansion not enough arguments for @2
ERROR: line 88, ucode syntax: expected '/' after MB4
ERROR: line 91, macro expansion recursion limit hit
ERROR: line 94, token name truncated: 1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567
ERROR: line 95, ucode syntax: empty token at start or after '/' zor ','
ERROR: line 100, ucode too many fields
ERROR: 46 errors found in file test_parser.mic
+ ./cmicro2 -d 0xf -l runs/test2/b.lst -o /dev/null test_parser.mic
DEBUG: opening listing file runs/test2/b.lst
DEBUG: begin processing file test_parser.mic
DEBUG: line 1    : ; SPDX-License-Identifier: MIT
DEBUG: line 2    : ; SPDX-FileCopyrightText: 2023 vaxfpga <vaxfpga@users.noreply.github.com>
DEBUG: line 3    : 
DEBUG: line 4    : .REGION/200,2ff
DEBUG: normalized: .REGION/200,2FF
DEBUG: parsing directive: .REGION /200,2FF
DEBUG: parsed region directive: 0x0200, 0x02ff
DEBUG: line 5    : 
DEBUG: line 6    : .REGION,bad1
DEBUG: normalized: .REGION,BAD1
DEBUG: parsing directive: .REGION ,BAD1
ERROR: line 6, region syntax in .REGION ,BAD1: '/' expected after .REGION
DEBUG: line 7    : .REGION/xbad2
DEBUG: normalized: .REGION/XBAD2
DEBUG: parsing directive: .REGION /XBAD2
ERROR: line 7, region syntax in  .REGION /XBAD2: number expected after '/'
DEBUG: line 8    : .REGION/badx3
DEBUG: normalized: .REGION/BADX3
DEBUG: parsing directive: .REGION /BADX3
ERROR: line 8, region syntax in  .REGION /BADX3: ',' expected after low address
DEBUG: line 9    : .REGION/200,xbad4
DEBUG: normalized: .REGION/200,XBAD4
DEBUG: parsing directive: .REGION /200,XBAD4
ERROR: line 9, region syntax in  .REGION /200,XBAD4: number expected after ','
DEBUG: line 10   : .REGION/200,badx5
DEBUG: normalized: .REGION/200,BADX5
DEBUG: parsing directive: .REGION /200,BADX5
ERROR: line 10, region syntax in  .REGION /200,BADX5: bad char X after high address
DEBUG: line 11   : 
DEBUG: line 12   : .MOO COW ; moo
DEBUG: normalized: .MOO COW
DEBUG: parsing directive: .MOO COW 
DEBUG: parsed directive: .MOO COW 
DEBUG: line 13   : 
DEBUG: line 14   : =01*
DEBUG: normalized: =01*
DEBUG: parsing constraint: 01*
DEBUG: parsed constraint: i=00000100 v=00000010 m=00000110 c=00000011
DEBUG: line 15   : =1*0
DEBUG: normalized: =1*0
DEBUG: parsing constraint: 1*0
DEBUG: parsed constraint: i=00000001 v=00000100 m=00000101 c=00000110
DEBUG: line 16   : =*01
DEBUG: normalized: =*01
DEBUG: parsing constraint: *01
DEBUG: parsed constraint: i=00000010 v=00000001 m=00000011 c=00000101
DEBUG: line 17   : =
DEBUG: normalized: =
DEBUG: parsing constraint: 
DEBUG: parsed constraint: i=00000000 v=00000000 m=00000000 c=00000000
DEBUG: line 18   : =2
DEBUG: normalized: =2
DEBUG: parsing constraint: 2
ERROR: line 18, constraint syntax in =2: bad char 2 after '='
DEBUG: line 19   : =01*2
DEBUG: normalized: =01*2
DEBUG: parsing constraint: 01*2
ERROR: line 19, constraint syntax in =01*2: bad char 2 after constraint
DEBUG: line 20   : 
DEBUG: line 21   : FG1/=<0>
DEBUG: normalized: FG1/=<0>
DEBUG: parsing field def: FG1 /= <0>
DEBUG: parsed field def FG1: li=0, ri=0 def=0x0 flags=0b000
DEBUG: line 22   : FG2 /=<13:0>
DEBUG: normalized: FG2 /=<13:0>
DEBUG: parsing field def: FG2 /= <13:0>
DEBUG: parsed field def FG2: li=13, ri=0 def=0x0 flags=0b000
DEBUG: line 23   : FG3/= <1:0>,
DEBUG: line 24   :   .DEFAULT=f
DEBUG: normalized: FG3/= <1:0>,  .DEFAULT=F
DEBUG: parsing field def: FG3 /=  <1:0>,  .DEFAULT=F
DEBUG: parsed field def FG3: li=1, ri=0 def=0xf flags=0b100
DEBUG: line 25   : FG4/= <1:0>,.DEFAULT = 100
DEBUG: normalized: FG4/= <1:0>,.DEFAULT = 100
DEBUG: parsing field def: FG4 /=  <1:0>,.DEFAULT = 100
DEBUG: parsed field def FG4: li=1, ri=0 def=0x100 flags=0b100
DEBUG: line 26   : FG5 /= <1:0>, .ADDRESS
DEBUG: normalized: FG5 /= <1:0>, .ADDRESS
DEBUG: parsing field def: FG5 /=  <1:0>, .ADDRESS
DEBUG: parsed field def FG5: li=1, ri=0 def=0x0 flags=0b010
DEBUG: line 27   : FG6 /= <1:0>, .NEXTADDRESS
DEBUG: normalized: FG6 /= <1:0>, .NEXTADDRESS
DEBUG: parsing field def: FG6 /=  <1:0>, .NEXTADDRESS
DEBUG: parsed field def FG6: li=1, ri=0 def=0x0 flags=0b011
DEBUG: line 28   : 
DEBUG: line 29   : /= FB0
DEBUG: normalized: /= FB0
DEBUG: parsing field def:  /=  FB0
ERROR: line 29, field def syntax in /=  FB0: empty name
DEBUG: line 30   : FB1 /= x
DEBUG: normalized: FB1 /= X
DEBUG: parsing field def: FB1 /=  X
ERROR: line 30, field def syntax in FB1 /=  X: '<' expected after '/='
DEBUG: line 31   : FB2 /= <x
DEBUG: normalized: FB2 /= <X
DEBUG: parsing field def: FB2 /=  <X
ERROR: line 31, field def syntax in FB2 /=  <X: number expected after '<'
DEBUG: line 32   : FB3 /= <0x
DEBUG: normalized: FB3 /= <0X
DEBUG: parsing field def: FB3 /=  <0X
ERROR: line 32, field def syntax in FB3 /=  <0X: '>' expected after number
DEBUG: line 33   : FB4 /= <0:x
DEBUG: normalized: FB4 /= <0:X
DEBUG: parsing field def: FB4 /=  <0:X
ERROR: line 33, field def syntax in FB4 /=  <0:X: number expected after ':'
DEBUG: line 34   : FB5 /= <0>x
DEBUG: normalized: FB5 /= <0>X
DEBUG: parsing field def: FB5 /=  <0>X
ERROR: line 34, field def syntax in FB5 /=  <0>X: bad char X after '>'
DEBUG: line 35   : FB6 /= <0>,]
DEBUG: normalized: FB6 /= <0>,]
DEBUG: parsing field def: FB6 /=  <0>,]
ERROR: line 35, field syntax in FB6 /=  <0>,]: qualifier expected after ','
DEBUG: line 36   : FB7 /= <0>,.POOP
DEBUG: normalized: FB7 /= <0>,.POOP
DEBUG: parsing field def: FB7 /=  <0>,.POOP
ERROR: line 36, field def syntax in FB7 /=  <0>,.POOP: bad qualifier .POOP
DEBUG: line 37   : FB8 /= <0>,.DEFAULT]
DEBUG: normalized: FB8 /= <0>,.DEFAULT]
DEBUG: parsing field def: FB8 /=  <0>,.DEFAULT]
ERROR: line 37, field syntax in FB8 /=  <0>,.DEFAULT]: expected '=' after .DEFAULT
DEBUG: line 38   : FB8 /= <0>,.DEFAULT=x
DEBUG: normalized: FB8 /= <0>,.DEFAULT=X
DEBUG: parsing field def: FB8 /=  <0>,.DEFAULT=X
ERROR: line 38, field def syntax in FB8 /=  <0>,.DEFAULT=X: number expected after '='
DEBUG: line 39   : FB8 /= <0>,.DEFAULT=f] 
DEBUG: normalized: FB8 /= <0>,.DEFAULT=F]
DEBUG: parsing field def: FB8 /=  <0>,.DEFAULT=F]
ERROR: line 39, field def syntax in FB8 /=  <0>,.DEFAULT=F]: bad char ] after .DEFAULT=
DEBUG: line 40   : FB8 /= <0>,.ADDRESS]
DEBUG: normalized: FB8 /= <0>,.ADDRESS]
DEBUG: parsing field def: FB8 /=  <0>,.ADDRESS]
ERROR: line 40, field def syntax in FB8 /=  <0>,.ADDRESS]: bad char ] after .ADDRESS=
DEBUG: line 41   : FB8 /= <0>,.NEXTADDRESS]
DEBUG: normalized: FB8 /= <0>,.NEXTADDRESS]
DEBUG: parsing field def: FB8 /=  <0>,.NEXTADDRESS]
ERROR: line 41, field def syntax in FB8 /=  <0>,.NEXTADDRESS]: bad char ] after .NEXTADDRESS=
DEBUG: line 42   : FB9 /= <0:1>
DEBUG: normalized: FB9 /= <0:1>
DEBUG: parsing field def: FB9 /=  <0:1>
DEBUG: parsed field def FB9: li=0, ri=1 def=0x0 flags=0b000
ERROR: line 42, illegal field indexes <0:1> in FB9
DEBUG: line 43   : FG1 /= <0>
DEBUG: normalized: FG1 /= <0>
DEBUG: parsing field def: FG1 /=  <0>
DEBUG: parsed field def FG1: li=0, ri=0 def=0x0 flags=0b000
ERROR: line 43, field FG1 already defined
DEBUG: line 44   : 
DEBUG: line 45   : A /= <0>
DEBUG: normalized: A /= <0>
DEBUG: parsing field def: A /=  <0>
DEBUG: parsed field def A: li=0, ri=0 def=0x0 flags=0b000
DEBUG: line 46   :     FDG1=0
DEBUG: normalized:     FDG1=0
DEBUG: parsing field val: FDG1 = 0
DEBUG: parsed field val: FDG1 0x0
DEBUG: line 47   :     FDG2 =0
DEBUG: normalized:     FDG2 =0
DEBUG: parsing field val: FDG2 = 0
DEBUG: parsed field val: FDG2 0x0
DEBUG: line 48   :     FDG3= 0
DEBUG: normalized:     FDG3= 0
DEBUG: parsing field val: FDG3 = 0
DEBUG: parsed field val: FDG3 0x0
DEBUG: line 49   :     FDG4 =0
DEBUG: normalized:     FDG4 =0
DEBUG: parsing field val: FDG4 = 0
DEBUG: parsed field val: FDG4 0x0
DEBUG: line 50   : 
DEBUG: line 51   :     FDB1 = x
DEBUG: normalized:     FDB1 = X
DEBUG: parsing field val: FDB1 = X
ERROR: line 51, field val syntax in FDB1 = X: expected number
DEBUG: line 52   :     FDB2 = 0x
DEBUG: normalized:     FDB2 = 0X
DEBUG: parsing field val: FDB2 = 0X
ERROR: line 52, field val syntax in FDB2 = 0X: bad char X after number
DEBUG: line 53   :     FDG1 = 0
DEBUG: normalized:     FDG1 = 0
DEBUG: parsing field val: FDG1 = 0
DEBUG: parsed field val: FDG1 0x0
ERROR: line 53, field value FDG1 = 0x0 already defined in field A
DEBUG: line 54   : 
DEBUG: line 55   : MG1 "A/FDG1"
DEBUG: normalized: MG1 "A/FDG1"
DEBUG: parsing macro: MG1 "A/FDG1"
DEBUG: parsed macro: MG1 "A/FDG1"
DEBUG: line 56   : MG2[a,b] "@1,@2"
DEBUG: normalized: MG2[A,B] "@1,@2"
DEBUG: parsing macro: MG2[A,B] "@1,@2"
DEBUG: parsed macro: MG2[,] "@1,@2"
DEBUG: line 57   : 
DEBUG: line 58   : MB1 "A/A1
DEBUG: normalized: MB1 "A/A1
DEBUG: parsing macro: MB1 "A/A1
ERROR: line 58, macro def syntax: expected trailing '"'
DEBUG: line 59   : MG1 "MB2"
DEBUG: normalized: MG1 "MB2"
DEBUG: parsing macro: MG1 "MB2"
DEBUG: parsed macro: MG1 "MB2"
ERROR: line 59, macro MG1 already defined
DEBUG: line 60   : 
DEBUG: line 61   : FDB3 = 0
DEBUG: normalized: FDB3 = 0
DEBUG: parsing field val: FDB3 = 0
DEBUG: parsed field val: FDB3 0x0
ERROR: line 61, field value FDB3 = 0x0 cannot be defined outside active field
DEBUG: line 62   : 
DEBUG: line 63   : lg1: A/FDG1
DEBUG: normalized: LG1: A/FDG1
DEBUG: parsing address/label: LG1
DEBUG: parsed label LG1
DEBUG: parsing microcode: A/FDG1
DEBUG: expanding : A/FDG1
DEBUG: expanded  : A/FDG1
DEBUG: line 64   : lg2: X/ ; bad ucode
DEBUG: normalized: LG2: X/
DEBUG: parsing address/label: LG2
DEBUG: parsed label LG2
DEBUG: parsing microcode: X/
DEBUG: expanding : X/
DEBUG: expanded  : X/
ERROR: line 64, ucode syntax: line truncated after '/'
DEBUG: line 65   : lg1: A/FDG1 ; bad dup label
DEBUG: normalized: LG1: A/FDG1
DEBUG: parsing address/label: LG1
DEBUG: parsed label LG1
ERROR: line 65, duplicate label: LG1
DEBUG: line 66   :    
DEBUG: line 67   : 0cab: ; lg3
DEBUG: normalized: 0CAB:
DEBUG: parsing address/label: 0CAB
DEBUG: parsed address 0xcab
DEBUG: line 68   : 0x12: ; lb3 bad mult addr
DEBUG: normalized: 0X12:
DEBUG: parsing address/label: 0X12
DEBUG: parsed address 0x12
ERROR: line 68, multiple address specifiers
DEBUG: line 69   : 123x: ; lb4
DEBUG: normalized: 123X:
DEBUG: parsing address/label: 123X
ERROR: line 69, addr syntax: bad char : after number
DEBUG: line 70   : : ;lb5
DEBUG: normalized: :
DEBUG: parsing address/label: 
ERROR: line 70, label syntax: empty label before ':'
DEBUG: line 71   : 
DEBUG: line 72   : A/0
DEBUG: normalized: A/0
DEBUG: parsing microcode: A/0
DEBUG: expanding : A/0
DEBUG: expanded  : A/0
DEBUG: line 73   : X/0x,
DEBUG: line 74   : X/
DEBUG: normalized: X/0X,X/
DEBUG: parsing microcode: X/0X,X/
DEBUG: expanding : X/0X,X/
DEBUG: expanded  : X/0X,X/
ERROR: line 74, ucode syntax: number format bad: 0X
DEBUG: line 75   : X/0/
DEBUG: normalized: X/0/
DEBUG: parsing microcode: X/0/
DEBUG: expanding : X/0/
DEBUG: expanded  : X/0/
ERROR: line 75, ucode syntax: expected ',' after 0
DEBUG: line 76   : X,X
DEBUG: normalized: X,X
DEBUG: parsing microcode: X,X
DEBUG: expanding : X,X
DEBUG: expanded  : X,X
ERROR: line 76, ucode syntax: expected '/' after X
DEBUG: line 77   : X/1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567
DEBUG: normalized: X/1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567
DEBUG: parsing microcode: X/1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567
DEBUG: expanding : X/1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567
DEBUG: expanded  : X/1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567
ERROR: line 77, token name truncated: 1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567
DEBUG: line 78   : X]
DEBUG: normalized: X]
DEBUG: parsing microcode: X]
DEBUG: expanding : X]
DEBUG: expanded  : X]
ERROR: line 78, ucode syntax: expected '/' after X
DEBUG: line 79   : 
DEBUG: line 80   : MB2[] "@:"
DEBUG: normalized: MB2[] "@:"
DEBUG: parsing macro: MB2[] "@:"
DEBUG: parsed macro: MB2[] "@:"
DEBUG: line 81   : MB2[A/0]
DEBUG: normalized: MB2[A/0]
DEBUG: parsing microcode: MB2[A/0]
DEBUG: expanding : MB2[A/0]
ERROR: line 81, macro expansion bad arg: @:
DEBUG: line 82   : 
DEBUG: line 83   : MB3[] "@/"
DEBUG: normalized: MB3[] "@/"
DEBUG: parsing macro: MB3[] "@/"
DEBUG: parsed macro: MB3[] "@/"
DEBUG: line 84   : MB3[A/0]
DEBUG: normalized: MB3[A/0]
DEBUG: parsing microcode: MB3[A/0]
DEBUG: expanding : MB3[A/0]
ERROR: line 84, macro expansion bad arg: @/
DEBUG: line 85   : 
DEBUG: line 86   : MB4[] "@2"
DEBUG: normalized: MB4[] "@2"
DEBUG: parsing macro: MB4[] "@2"
DEBUG: parsed macro: MB4[] "@2"
DEBUG: line 87   : MB4[A/0]
DEBUG: normalized: MB4[A/0]
DEBUG: parsing microcode: MB4[A/0]
DEBUG: expanding : MB4[A/0]
ERROR: line 87, macro expansion not enough arguments for @2
DEBUG: line 88   : MB4[@
DEBUG: normalized: MB4[@
DEBUG: parsing microcode: MB4[@
DEBUG: expanding : MB4[@
DEBUG: expanded  : MB4[@
ERROR: line 88, ucode syntax: expected '/' after MB4
DEBUG: line 89   : 
DEBUG: line 90   : MB5 "A/0,MB5"
DEBUG: normalized: MB5 "A/0,MB5"
DEBUG: parsing macro: MB5 "A/0,MB5"
DEBUG: parsed macro: MB5 "A/0,MB5"
DEBUG: line 91   : MB5
DEBUG: normalized: MB5
DEBUG: parsing microcode: MB5
DEBUG: expanding : MB5
DEBUG: expanding macro MB5 to "A/0,MB5"
DEBUG: expanding macro MB5 to "A/0,MB5"
DEBUG: expanding macro MB5 to "A/0,MB5"
DEBUG: expanding macro MB5 to "A/0,MB5"
DEBUG: expanding macro MB5 to "A/0,MB5"
DEBUG: expanding macro MB5 to "A/0,MB5"
DEBUG: expanding macro MB5 to "A/0,MB5"
DEBUG: expanding macro MB5 to "A/0,MB5"
DEBUG: expanding macro MB5 to "A/0,MB5"
DEBUG: expanding macro MB5 to "A/0,MB5"
ERROR: line 91, macro expansion recursion limit hit
DEBUG: line 92   : 
DEBUG: line 93   : ; 127 max name
DEBUG: line 94   : 1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567/0
DEBUG: normalized: 1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567/0
ERROR: line 94, token name truncated: 1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567
DEBUG: line 95   : /0
DEBUG: normalized: /0
DEBUG: parsing microcode: /0
DEBUG: expanding : /0
DEBUG: expanded  : /0
ERROR: line 95, ucode syntax: empty token at start or after '/' zor ','
DEBUG: line 96   : 
DEBUG: line 97   : MG2[A/0,MG2[MG1,MG1]]
DEBUG: normalized: MG2[A/0,MG2[MG1,MG1]]
DEBUG: parsing microcode: MG2[A/0,MG2[MG1,MG1]]
DEBUG: expanding : MG2[A/0,MG2[MG1,MG1]]
DEBUG: expanding macro MG2[,](A/0,MG2[MG1,MG1]) to "A/0,MG2[MG1,MG1]"
DEBUG: expanding macro MG2[,](MG1,MG1) to "MG1,MG1"
DEBUG: expanding macro MG1 to "A/FDG1"
DEBUG: expanding macro MG1 to "A/FDG1"
DEBUG: expanded  : A/0,A/FDG1,A/FDG1
DEBUG: line 98   : 
DEBUG: line 99   : A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,
DEBUG: line 100  : A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0
DEBUG: normalized: A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0
DEBUG: parsing microcode: A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0
DEBUG: expanding : A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0
DEBUG: expanded  : A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0
ERROR: line 100, ucode too many fields
DEBUG: line 101  : 
DEBUG: end processing file test_parser.mic
ERROR: 46 errors found in file test_parser.mic
DEBUG: begin writing output file /dev/null
DEBUG: end writing output file /dev/null
; ---- begin file "test_parser.mic" ----
;
;     1: ; SPDX-License-Identifier: MIT
;     2: ; SPDX-FileCopyrightText: 2023 vaxfpga <vaxfpga@users.noreply.github.com>
;     3: 
;     4: .REGION/200,2ff
;     5: 
;     6: .REGION,bad1
; ERROR: region syntax in .REGION ,BAD1: '/' expected after .REGION
;     7: .REGION/xbad2
; ERROR: region syntax in  .REGION /XBAD2: number expected after '/'
;     8: .REGION/badx3
; ERROR: region syntax in  .REGION /BADX3: ',' expected after low address
;     9: .REGION/200,xbad4
; ERROR: region syntax in  .REGION /200,XBAD4: number expected after ','
;    10: .REGION/200,badx5
; ERROR: region syntax in  .REGION /200,BADX5: bad char X after high address
;    11: 
;    12: .MOO COW ; moo
;    13: 
;    14: =01*
;    15: =1*0
;    16: =*01
;    17: =
;    18: =2
; ERROR: constraint syntax in =2: bad char 2 after '='
;    19: =01*2
; ERROR: constraint syntax in =01*2: bad char 2 after constraint
;    20: 
;    21: FG1/=<0>
;    22: FG2 /=<13:0>
;    23: FG3/= <1:0>,
;    24:   .DEFAULT=f
;    25: FG4/= <1:0>,.DEFAULT = 100
;    26: FG5 /= <1:0>, .ADDRESS
;    27: FG6 /= <1:0>, .NEXTADDRESS
;    28: 
;    29: /= FB0
; ERROR: field def syntax in /=  FB0: empty name
;    30: FB1 /= x
; ERROR: field def syntax in FB1 /=  X: '<' expected after '/='
;    31: FB2 /= <x
; ERROR: field def syntax in FB2 /=  <X: number expected after '<'
;    32: FB3 /= <0x
; ERROR: field def syntax in FB3 /=  <0X: '>' expected after number
;    33: FB4 /= <0:x
; ERROR: field def syntax in FB4 /=  <0:X: number expected after ':'
;    34: FB5 /= <0>x
; ERROR: field def syntax in FB5 /=  <0>X: bad char X after '>'
;    35: FB6 /= <0>,]
; ERROR: field syntax in FB6 /=  <0>,]: qualifier expected after ','
;    36: FB7 /= <0>,.POOP
; ERROR: field def syntax in FB7 /=  <0>,.POOP: bad qualifier .POOP
;    37: FB8 /= <0>,.DEFAULT]
; ERROR: field syntax in FB8 /=  <0>,.DEFAULT]: expected '=' after .DEFAULT
;    38: FB8 /= <0>,.DEFAULT=x
; ERROR: field def syntax in FB8 /=  <0>,.DEFAULT=X: number expected after '='
;    39: FB8 /= <0>,.DEFAULT=f] 
; ERROR: field def syntax in FB8 /=  <0>,.DEFAULT=F]: bad char ] after .DEFAULT=
;    40: FB8 /= <0>,.ADDRESS]
; ERROR: field def syntax in FB8 /=  <0>,.ADDRESS]: bad char ] after .ADDRESS=
;    41: FB8 /= <0>,.NEXTADDRESS]
; ERROR: field def syntax in FB8 /=  <0>,.NEXTADDRESS]: bad char ] after .NEXTADDRESS=
;    42: FB9 /= <0:1>
; ERROR: illegal field indexes <0:1> in FB9
;    43: FG1 /= <0>
; ERROR: field FG1 already defined
;    44: 
;    45: A /= <0>
;    46:     FDG1=0
;    47:     FDG2 =0
;    48:     FDG3= 0
;    49:     FDG4 =0
;    50: 
;    51:     FDB1 = x
; ERROR: field val syntax in FDB1 = X: expected number
;    52:     FDB2 = 0x
; ERROR: field val syntax in FDB2 = 0X: bad char X after number
;    53:     FDG1 = 0
; ERROR: field value FDG1 = 0x0 already defined in field A
;    54: 
;    55: MG1 "A/FDG1"
;    56: MG2[a,b] "@1,@2"
;    57: 
;    58: MB1 "A/A1
; ERROR: macro def syntax: expected trailing '"'
;    59: MG1 "MB2"
; ERROR: macro MG1 already defined
;    60: 
;    61: FDB3 = 0
; ERROR: field value FDB3 = 0x0 cannot be defined outside active field
;    62: 
;    63: lg1: A/FDG1
U,0200, 0000,0000,0000,0000,0000,0000
;    64: lg2: X/ ; bad ucode
; ERROR: ucode syntax: line truncated after '/'
;    65: lg1: A/FDG1 ; bad dup label
; ERROR: duplicate label: LG1
;    66:    
;    67: 0cab: ; lg3
;    68: 0x12: ; lb3 bad mult addr
; ERROR: multiple address specifiers
;    69: 123x: ; lb4
; ERROR: addr syntax: bad char : after number
;    70: : ;lb5
; ERROR: label syntax: empty label before ':'
;    71: 
;    72: A/0
U,0CAB, 0000,0000,0000,0000,0000,0000
;    73: X/0x,
;    74: X/
; ERROR: ucode syntax: number format bad: 0X
;    75: X/0/
; ERROR: ucode syntax: expected ',' after 0
;    76: X,X
; ERROR: ucode syntax: expected '/' after X
;    77: X/1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567
; ERROR: token name truncated: 1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567
;    78: X]
; ERROR: ucode syntax: expected '/' after X
;    79: 
;    80: MB2[] "@:"
;    81: MB2[A/0]
; ERROR: macro expansion bad arg: @:
;    82: 
;    83: MB3[] "@/"
;    84: MB3[A/0]
; ERROR: macro expansion bad arg: @/
;    85: 
;    86: MB4[] "@2"
;    87: MB4[A/0]
; ERROR: macro expansion not enough arguments for @2
;    88: MB4[@
; ERROR: ucode syntax: expected '/' after MB4
;    89: 
;    90: MB5 "A/0,MB5"
;    91: MB5
; ERROR: macro expansion recursion limit hit
;    92: 
;    93: ; 127 max name
;    94: 1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567/0
; ERROR: token name truncated: 1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567
;    95: /0
; ERROR: ucode syntax: empty token at start or after '/' zor ','
;    96: 
;    97: MG2[A/0,MG2[MG1,MG1]]
;         "A/0,A/FDG1,A/FDG1"
U,0201, 0000,0000,0000,0000,0000,0000
;    98: 
;    99: A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,
;   100: A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0
; ERROR: ucode too many fields
;   101: 
;
; ---- end file "test_parser.mic", 101 lines, 46 errors ----
; ---- begin symbol table ----
; 2 symbols
;   LG1      : 0x0200
;   LG2      : 0x0cab
;
; ---- end symbol table ----
; ---- begin file "test_parser.mic" ----
;
;     1: ; SPDX-License-Identifier: MIT
;     2: ; SPDX-FileCopyrightText: 2023 vaxfpga <vaxfpga@users.noreply.github.com>
;     3: 
;     4: .REGION/200,2ff
; DEBUG: parsing directive: .REGION /200,2FF
; DEBUG: parsed region directive: 0x0200, 0x02ff
;     5: 
;     6: .REGION,bad1
; DEBUG: parsing directive: .REGION ,BAD1
; ERROR: region syntax in .REGION ,BAD1: '/' expected after .REGION
;     7: .REGION/xbad2
; DEBUG: parsing directive: .REGION /XBAD2
; ERROR: region syntax in  .REGION /XBAD2: number expected after '/'
;     8: .REGION/badx3
; DEBUG: parsing directive: .REGION /BADX3
; ERROR: region syntax in  .REGION /BADX3: ',' expected after low address
;     9: .REGION/200,xbad4
; DEBUG: parsing directive: .REGION /200,XBAD4
; ERROR: region syntax in  .REGION /200,XBAD4: number expected after ','
;    10: .REGION/200,badx5
; DEBUG: parsing directive: .REGION /200,BADX5
; ERROR: region syntax in  .REGION /200,BADX5: bad char X after high address
;    11: 
;    12: .MOO COW ; moo
; DEBUG: parsing directive: .MOO COW 
; DEBUG: parsed directive: .MOO COW 
;    13: 
;    14: =01*
; DEBUG: parsing constraint: 01*
; DEBUG: parsed constraint: i=00000100 v=00000010 m=00000110 c=00000011
;    15: =1*0
; DEBUG: parsing constraint: 1*0
; DEBUG: parsed constraint: i=00000001 v=00000100 m=00000101 c=00000110
;    16: =*01
; DEBUG: parsing constraint: *01
; DEBUG: parsed constraint: i=00000010 v=00000001 m=00000011 c=00000101
;    17: =
; DEBUG: parsing constraint: 
; DEBUG: parsed constraint: i=00000000 v=00000000 m=00000000 c=00000000
;    18: =2
; DEBUG: parsing constraint: 2
; ERROR: constraint syntax in =2: bad char 2 after '='
;    19: =01*2
; DEBUG: parsing constraint: 01*2
; ERROR: constraint syntax in =01*2: bad char 2 after constraint
;    20: 
;    21: FG1/=<0>
; DEBUG: parsing field def: FG1 /= <0>
; DEBUG: parsed field def FG1: li=0, ri=0 def=0x0 flags=0b000
;    22: FG2 /=<13:0>
; DEBUG: parsing field def: FG2 /= <13:0>
; DEBUG: parsed field def FG2: li=13, ri=0 def=0x0 flags=0b000
;    23: FG3/= <1:0>,
;    24:   .DEFAULT=f
; DEBUG: parsing field def: FG3 /=  <1:0>,  .DEFAULT=F
; DEBUG: parsed field def FG3: li=1, ri=0 def=0xf flags=0b100
;    25: FG4/= <1:0>,.DEFAULT = 100
; DEBUG: parsing field def: FG4 /=  <1:0>,.DEFAULT = 100
; DEBUG: parsed field def FG4: li=1, ri=0 def=0x100 flags=0b100
;    26: FG5 /= <1:0>, .ADDRESS
; DEBUG: parsing field def: FG5 /=  <1:0>, .ADDRESS
; DEBUG: parsed field def FG5: li=1, ri=0 def=0x0 flags=0b010
;    27: FG6 /= <1:0>, .NEXTADDRESS
; DEBUG: parsing field def: FG6 /=  <1:0>, .NEXTADDRESS
; DEBUG: parsed field def FG6: li=1, ri=0 def=0x0 flags=0b011
;    28: 
;    29: /= FB0
; DEBUG: parsing field def:  /=  FB0
; ERROR: field def syntax in /=  FB0: empty name
;    30: FB1 /= x
; DEBUG: parsing field def: FB1 /=  X
; ERROR: field def syntax in FB1 /=  X: '<' expected after '/='
;    31: FB2 /= <x
; DEBUG: parsing field def: FB2 /=  <X
; ERROR: field def syntax in FB2 /=  <X: number expected after '<'
;    32: FB3 /= <0x
; DEBUG: parsing field def: FB3 /=  <0X
; ERROR: field def syntax in FB3 /=  <0X: '>' expected after number
;    33: FB4 /= <0:x
; DEBUG: parsing field def: FB4 /=  <0:X
; ERROR: field def syntax in FB4 /=  <0:X: number expected after ':'
;    34: FB5 /= <0>x
; DEBUG: parsing field def: FB5 /=  <0>X
; ERROR: field def syntax in FB5 /=  <0>X: bad char X after '>'
;    35: FB6 /= <0>,]
; DEBUG: parsing field def: FB6 /=  <0>,]
; ERROR: field syntax in FB6 /=  <0>,]: qualifier expected after ','
;    36: FB7 /= <0>,.POOP
; DEBUG: parsing field def: FB7 /=  <0>,.POOP
; ERROR: field def syntax in FB7 /=  <0>,.POOP: bad qualifier .POOP
;    37: FB8 /= <0>,.DEFAULT]
; DEBUG: parsing field def: FB8 /=  <0>,.DEFAULT]
; ERROR: field syntax in FB8 /=  <0>,.DEFAULT]: expected '=' after .DEFAULT
;    38: FB8 /= <0>,.DEFAULT=x
; DEBUG: parsing field def: FB8 /=  <0>,.DEFAULT=X
; ERROR: field def syntax in FB8 /=  <0>,.DEFAULT=X: number expected after '='
;    39: FB8 /= <0>,.DEFAULT=f] 
; DEBUG: parsing field def: FB8 /=  <0>,.DEFAULT=F]
; ERROR: field def syntax in FB8 /=  <0>,.DEFAULT=F]: bad char ] after .DEFAULT=
;    40: FB8 /= <0>,.ADDRESS]
; DEBUG: parsing field def: FB8 /=  <0>,.ADDRESS]
; ERROR: field def syntax in FB8 /=  <0>,.ADDRESS]: bad char ] after .ADDRESS=
;    41: FB8 /= <0>,.NEXTADDRESS]
; DEBUG: parsing field def: FB8 /=  <0>,.NEXTADDRESS]
; ERROR: field def syntax in FB8 /=  <0>,.NEXTADDRESS]: bad char ] after .NEXTADDRESS=
;    42: FB9 /= <0:1>
; DEBUG: parsing field def: FB9 /=  <0:1>
; DEBUG: parsed field def FB9: li=0, ri=1 def=0x0 flags=0b000
; ERROR: illegal field indexes <0:1> in FB9
;    43: FG1 /= <0>
; DEBUG: parsing field def: FG1 /=  <0>
; DEBUG: parsed field def FG1: li=0, ri=0 def=0x0 flags=0b000
; ERROR: field FG1 already defined
;    44: 
;    45: A /= <0>
; DEBUG: parsing field def: A /=  <0>
; DEBUG: parsed field def A: li=0, ri=0 def=0x0 flags=0b000
;    46:     FDG1=0
; DEBUG: parsing field val: FDG1 = 0
; DEBUG: parsed field val: FDG1 0x0
;    47:     FDG2 =0
; DEBUG: parsing field val: FDG2 = 0
; DEBUG: parsed field val: FDG2 0x0
;    48:     FDG3= 0
; DEBUG: parsing field val: FDG3 = 0
; DEBUG: parsed field val: FDG3 0x0
;    49:     FDG4 =0
; DEBUG: parsing field val: FDG4 = 0
; DEBUG: parsed field val: FDG4 0x0
;    50: 
;    51:     FDB1 = x
; DEBUG: parsing field val: FDB1 = X
; ERROR: field val syntax in FDB1 = X: expected number
;    52:     FDB2 = 0x
; DEBUG: parsing field val: FDB2 = 0X
; ERROR: field val syntax in FDB2 = 0X: bad char X after number
;    53:     FDG1 = 0
; DEBUG: parsing field val: FDG1 = 0
; DEBUG: parsed field val: FDG1 0x0
; ERROR: field value FDG1 = 0x0 already defined in field A
;    54: 
;    55: MG1 "A/FDG1"
; DEBUG: parsing macro: MG1 "A/FDG1"
; DEBUG: parsed macro: MG1 "A/FDG1"
;    56: MG2[a,b] "@1,@2"
; DEBUG: parsing macro: MG2[A,B] "@1,@2"
; DEBUG: parsed macro: MG2[,] "@1,@2"
;    57: 
;    58: MB1 "A/A1
; DEBUG: parsing macro: MB1 "A/A1
; ERROR: macro def syntax: expected trailing '"'
;    59: MG1 "MB2"
; DEBUG: parsing macro: MG1 "MB2"
; DEBUG: parsed macro: MG1 "MB2"
; ERROR: macro MG1 already defined
;    60: 
;    61: FDB3 = 0
; DEBUG: parsing field val: FDB3 = 0
; DEBUG: parsed field val: FDB3 0x0
; ERROR: field value FDB3 = 0x0 cannot be defined outside active field
;    62: 
;    63: lg1: A/FDG1
; DEBUG: parsing address/label: LG1
; DEBUG: parsed label LG1
; DEBUG: parsing microcode: A/FDG1
; DEBUG: expanding : A/FDG1
; DEBUG: expanded  : A/FDG1
U,0200, 0000,0000,0000,0000,0000,0000
;    64: lg2: X/ ; bad ucode
; DEBUG: parsing address/label: LG2
; DEBUG: parsed label LG2
; DEBUG: parsing microcode: X/
; DEBUG: expanding : X/
; DEBUG: expanded  : X/
; ERROR: ucode syntax: line truncated after '/'
;    65: lg1: A/FDG1 ; bad dup label
; DEBUG: parsing address/label: LG1
; DEBUG: parsed label LG1
; ERROR: duplicate label: LG1
;    66:    
;    67: 0cab: ; lg3
; DEBUG: parsing address/label: 0CAB
; DEBUG: parsed address 0xcab
;    68: 0x12: ; lb3 bad mult addr
; DEBUG: parsing address/label: 0X12
; DEBUG: parsed address 0x12
; ERROR: multiple address specifiers
;    69: 123x: ; lb4
; DEBUG: parsing address/label: 123X
; ERROR: addr syntax: bad char : after number
;    70: : ;lb5
; DEBUG: parsing address/label: 
; ERROR: label syntax: empty label before ':'
;    71: 
;    72: A/0
; DEBUG: parsing microcode: A/0
; DEBUG: expanding : A/0
; DEBUG: expanded  : A/0
U,0CAB, 0000,0000,0000,0000,0000,0000
;    73: X/0x,
;    74: X/
; DEBUG: parsing microcode: X/0X,X/
; DEBUG: expanding : X/0X,X/
; DEBUG: expanded  : X/0X,X/
; ERROR: ucode syntax: number format bad: 0X
;    75: X/0/
; DEBUG: parsing microcode: X/0/
; DEBUG: expanding : X/0/
; DEBUG: expanded  : X/0/
; ERROR: ucode syntax: expected ',' after 0
;    76: X,X
; DEBUG: parsing microcode: X,X
; DEBUG: expanding : X,X
; DEBUG: expanded  : X,X
; ERROR: ucode syntax: expected '/' after X
;    77: X/1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567
; DEBUG: parsing microcode: X/1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567
; DEBUG: expanding : X/1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567
; DEBUG: expanded  : X/1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567
; ERROR: token name truncated: 1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567
;    78: X]
; DEBUG: parsing microcode: X]
; DEBUG: expanding : X]
; DEBUG: expanded  : X]
; ERROR: ucode syntax: expected '/' after X
;    79: 
;    80: MB2[] "@:"
; DEBUG: parsing macro: MB2[] "@:"
; DEBUG: parsed macro: MB2[] "@:"
;    81: MB2[A/0]
; DEBUG: parsing microcode: MB2[A/0]
; DEBUG: expanding : MB2[A/0]
; ERROR: macro expansion bad arg: @:
;    82: 
;    83: MB3[] "@/"
; DEBUG: parsing macro: MB3[] "@/"
; DEBUG: parsed macro: MB3[] "@/"
;    84: MB3[A/0]
; DEBUG: parsing microcode: MB3[A/0]
; DEBUG: expanding : MB3[A/0]
; ERROR: macro expansion bad arg: @/
;    85: 
;    86: MB4[] "@2"
; DEBUG: parsing macro: MB4[] "@2"
; DEBUG: parsed macro: MB4[] "@2"
;    87: MB4[A/0]
; DEBUG: parsing microcode: MB4[A/0]
; DEBUG: expanding : MB4[A/0]
; ERROR: macro expansion not enough arguments for @2
;    88: MB4[@
; DEBUG: parsing microcode: MB4[@
; DEBUG: expanding : MB4[@
; DEBUG: expanded  : MB4[@
; ERROR: ucode syntax: expected '/' after MB4
;    89: 
;    90: MB5 "A/0,MB5"
; DEBUG: parsing macro: MB5 "A/0,MB5"
; DEBUG: parsed macro: MB5 "A/0,MB5"
;    91: MB5
; DEBUG: parsing microcode: MB5
; DEBUG: expanding : MB5
; DEBUG: expanding macro MB5 to "A/0,MB5"
; DEBUG: expanding macro MB5 to "A/0,MB5"
; DEBUG: expanding macro MB5 to "A/0,MB5"
; DEBUG: expanding macro MB5 to "A/0,MB5"
; DEBUG: expanding macro MB5 to "A/0,MB5"
; DEBUG: expanding macro MB5 to "A/0,MB5"
; DEBUG: expanding macro MB5 to "A/0,MB5"
; DEBUG: expanding macro MB5 to "A/0,MB5"
; DEBUG: expanding macro MB5 to "A/0,MB5"
; DEBUG: expanding macro MB5 to "A/0,MB5"
; ERROR: macro expansion recursion limit hit
;    92: 
;    93: ; 127 max name
;    94: 1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567/0
; ERROR: token name truncated: 1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567
;    95: /0
; DEBUG: parsing microcode: /0
; DEBUG: expanding : /0
; DEBUG: expanded  : /0
; ERROR: ucode syntax: empty token at start or after '/' zor ','
;    96: 
;    97: MG2[A/0,MG2[MG1,MG1]]
; DEBUG: parsing microcode: MG2[A/0,MG2[MG1,MG1]]
; DEBUG: expanding : MG2[A/0,MG2[MG1,MG1]]
; DEBUG: expanding macro MG2[,](A/0,MG2[MG1,MG1]) to "A/0,MG2[MG1,MG1]"
; DEBUG: expanding macro MG2[,](MG1,MG1) to "MG1,MG1"
; DEBUG: expanding macro MG1 to "A/FDG1"
; DEBUG: expanding macro MG1 to "A/FDG1"
; DEBUG: expanded  : A/0,A/FDG1,A/FDG1
;         "A/0,A/FDG1,A/FDG1"
U,0201, 0000,0000,0000,0000,0000,0000
;    98: 
;    99: A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,
;   100: A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0
; DEBUG: parsing microcode: A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0
; DEBUG: expanding : A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0
; DEBUG: expanded  : A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0,A/0
; ERROR: ucode too many fields
;   101: 
;
; ---- end file "test_parser.mic", 101 lines, 46 errors ----
; ---- begin symbol table ----
; 2 symbols
;   LG1      : 0x0200
;   LG2      : 0x0cab
;
; ---- end symbol table ----
